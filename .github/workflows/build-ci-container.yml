name: build-and-deploy-ci-container

on: [push, pull_request]
#    branches:
#      - 'develop'
#    paths:
#      - 'configs/github/spack.yaml'
#      - '.github/workflow/build-ci-container.yaml'
#    release:
#      types: [published]

jobs:
  deploy-docker-container:
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/spack/ubuntu-bionic:latest
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set Container Tag (push to develop)
        run: |
          container="cajitafluids-nocuda:latest"
          echo "container=${container}" >> $GITHUB_ENV

#      - name: Set Container Tag on Release
#        if: github.event_name == 'release'
#        run: |
#          versioned="cajitafluids-nocuda:${GITHUB_REF##*/}"
#          echo "versioned=${versioned}" >> $GITHUB_ENV

      - name: Generate the Dockerfile
        run: |
          cp configs/github/spack.yaml .
          spack containerize | tee Dockerfile
          printf "Preparing to build ${{ env.container }} from Dockerfile"
          if [ ! -f "Dockerfile" ]; then
              printf "Dockerfile does not exist"
              exit 1;
          fi

#      - name: Upload Dockerfile
#        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535
#        with:
#          name: Dockerfile
#          path: Dockerfile
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Deploy
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ghcr.io/cup-ecs/${{ env.container }}
#            ghcr.io/cup-ecs/${{ env.versioned }}
